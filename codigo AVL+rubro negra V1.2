#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ====================================================
// PRODUTO E AVL (CATÁLOGO)
// ====================================================
typedef struct Produto {
    int codigo;
    char nome[100];
    float preco;
} Produto;

// Nó da árvore AVL
typedef struct NoAVL {
    Produto item;
    int altura;
    struct NoAVL *esq, *dir;
} NoAVL;

int max(int a, int b) { return (a > b) ? a : b; }
int altura(NoAVL* n) { return (n == NULL) ? 0 : n->altura; }
int fatorBalanceamento(NoAVL* n) { return (n == NULL) ? 0 : altura(n->esq) - altura(n->dir); }

NoAVL* rotacaoDireitaAVL(NoAVL* y) {
    NoAVL* x = y->esq;
    NoAVL* T2 = x->dir;
    x->dir = y;
    y->esq = T2;
    y->altura = 1 + max(altura(y->esq), altura(y->dir));
    x->altura = 1 + max(altura(x->esq), altura(x->dir));
    return x;
}
NoAVL* rotacaoEsquerdaAVL(NoAVL* x) {
    NoAVL* y = x->dir;
    NoAVL* T2 = y->esq;
    y->esq = x;
    x->dir = T2;
    x->altura = 1 + max(altura(x->esq), altura(x->dir));
    y->altura = 1 + max(altura(y->esq), altura(y->dir));
    return y;
}

NoAVL* novoNoAVL(Produto p) {
    NoAVL* no = (NoAVL*) malloc(sizeof(NoAVL));
    no->item = p;
    no->altura = 1;
    no->esq = no->dir = NULL;
    return no;
}

NoAVL* inserirPorCodigoAVL(NoAVL* raiz, Produto p) {
    if (raiz == NULL) return novoNoAVL(p);
    if (p.codigo < raiz->item.codigo)
        raiz->esq = inserirPorCodigoAVL(raiz->esq, p);
    else if (p.codigo > raiz->item.codigo)
        raiz->dir = inserirPorCodigoAVL(raiz->dir, p);
    else return raiz;

    raiz->altura = 1 + max(altura(raiz->esq), altura(raiz->dir));
    int fb = fatorBalanceamento(raiz);

    if (fb > 1 && p.codigo < raiz->esq->item.codigo) return rotacaoDireitaAVL(raiz);
    if (fb < -1 && p.codigo > raiz->dir->item.codigo) return rotacaoEsquerdaAVL(raiz);
    if (fb > 1 && p.codigo > raiz->esq->item.codigo) {
        raiz->esq = rotacaoEsquerdaAVL(raiz->esq);
        return rotacaoDireitaAVL(raiz);
    }
    if (fb < -1 && p.codigo < raiz->dir->item.codigo) {
        raiz->dir = rotacaoDireitaAVL(raiz->dir);
        return rotacaoEsquerdaAVL(raiz);
    }
    return raiz;
}

NoAVL* buscarPorCodigoAVL(NoAVL* raiz, int codigo) {
    if (!raiz) return NULL;
    if (codigo == raiz->item.codigo) return raiz;
    if (codigo < raiz->item.codigo) return buscarPorCodigoAVL(raiz->esq, codigo);
    return buscarPorCodigoAVL(raiz->dir, codigo);
}

void emOrdemAVL(NoAVL* raiz) {
    if (raiz) {
        emOrdemAVL(raiz->esq);
        printf("Codigo: %d | Nome: %s | Preco: %.2f\n",
               raiz->item.codigo, raiz->item.nome, raiz->item.preco);
        emOrdemAVL(raiz->dir);
    }
}

// ====================================================
// RUBRO-NEGRA (CARRINHO)
// ====================================================

typedef enum { VERMELHO, PRETO } Cor;

typedef struct NoRN {
    Produto item;
    Cor cor;
    struct NoRN *esq, *dir, *pai;
} NoRN;

NoRN* novoNoRN(Produto p) {
    NoRN* no = (NoRN*) malloc(sizeof(NoRN));
    no->item = p;
    no->cor = VERMELHO;
    no->esq = no->dir = no->pai = NULL;
    return no;
}

void rotacaoEsquerdaRN(NoRN** raiz, NoRN* x) {
    NoRN* y = x->dir;
    x->dir = y->esq;
    if (y->esq) y->esq->pai = x;
    y->pai = x->pai;
    if (!x->pai) *raiz = y;
    else if (x == x->pai->esq) x->pai->esq = y;
    else x->pai->dir = y;
    y->esq = x;
    x->pai = y;
}

void rotacaoDireitaRN(NoRN** raiz, NoRN* y) {
    NoRN* x = y->esq;
    y->esq = x->dir;
    if (x->dir) x->dir->pai = y;
    x->pai = y->pai;
    if (!y->pai) *raiz = x;
    else if (y == y->pai->esq) y->pai->esq = x;
    else y->pai->dir = x;
    x->dir = y;
    y->pai = x;
}

void corrigirInsercaoRN(NoRN** raiz, NoRN* z) {
    while (z->pai && z->pai->cor == VERMELHO) {
        if (z->pai == z->pai->pai->esq) {
            NoRN* y = z->pai->pai->dir;
            if (y && y->cor == VERMELHO) {
                z->pai->cor = PRETO;
                y->cor = PRETO;
                z->pai->pai->cor = VERMELHO;
                z = z->pai->pai;
            } else {
                if (z == z->pai->dir) {
                    z = z->pai;
                    rotacaoEsquerdaRN(raiz, z);
                }
                z->pai->cor = PRETO;
                z->pai->pai->cor = VERMELHO;
                rotacaoDireitaRN(raiz, z->pai->pai);
            }
        } else {
            NoRN* y = z->pai->pai->esq;
            if (y && y->cor == VERMELHO) {
                z->pai->cor = PRETO;
                y->cor = PRETO;
                z->pai->pai->cor = VERMELHO;
                z = z->pai->pai;
            } else {
                if (z == z->pai->esq) {
                    z = z->pai;
                    rotacaoDireitaRN(raiz, z);
                }
                z->pai->cor = PRETO;
                z->pai->pai->cor = VERMELHO;
                rotacaoEsquerdaRN(raiz, z->pai->pai);
            }
        }
    }
    (*raiz)->cor = PRETO;
}

void inserirRN(NoRN** raiz, Produto p) {
    NoRN* z = novoNoRN(p);
    NoRN* y = NULL;
    NoRN* x = *raiz;

    while (x) {
        y = x;
        if (p.codigo < x->item.codigo)
            x = x->esq;
        else if (p.codigo > x->item.codigo)
            x = x->dir;
        else {
            printf("Produto ja no carrinho!\n");
            free(z);
            return;
        }
    }

    z->pai = y;
    if (!y) *raiz = z;
    else if (p.codigo < y->item.codigo)
        y->esq = z;
    else
        y->dir = z;

    corrigirInsercaoRN(raiz, z);
}

void emOrdemRN(NoRN* raiz) {
    if (raiz) {
        emOrdemRN(raiz->esq);
        printf("[%-7s] Codigo: %d | Nome: %s | Preco: %.2f\n",
               (raiz->cor == VERMELHO ? "VERMELHO" : "PRETO"),
               raiz->item.codigo, raiz->item.nome, raiz->item.preco);
        emOrdemRN(raiz->dir);
    }
}

// ====================================================
// GERAL (CARREGAR CSV + MENU)
// ====================================================

void carregarCSV(const char* nomeArquivo, NoAVL** arvoreCodigo) {
    FILE* f = fopen(nomeArquivo, "r");
    if (!f) {
        printf("Erro ao abrir arquivo!\n");
        return;
    }

    char linha[256];
    while (fgets(linha, sizeof(linha), f)) {
        Produto p;
        char* token = strtok(linha, ";");
        if (!token) continue;
        p.codigo = atoi(token);

        token = strtok(NULL, ";");
        if (!token) continue;
        strcpy(p.nome, token);

        token = strtok(NULL, ";");
        if (!token) continue;
        p.preco = atof(token);

        *arvoreCodigo = inserirPorCodigoAVL(*arvoreCodigo, p);
    }
    fclose(f);
}

void menu(NoAVL* arvoreCodigo, NoRN** carrinho) {
    int opc, codigo;
    do {
        printf("\n=== MENU ===\n");
        printf("1 - Listar produtos\n");
        printf("2 - Adicionar ao carrinho\n");
        printf("3 - Ver carrinho\n");
        printf("0 - Sair\n");
        printf("Opcao: ");
        scanf("%d", &opc);

        switch (opc) {
            case 1:
                emOrdemAVL(arvoreCodigo);
                break;
            case 2:
                printf("Digite o codigo do produto: ");
                scanf("%d", &codigo);
                {
                    NoAVL* prod = buscarPorCodigoAVL(arvoreCodigo, codigo);
                    if (prod) {
                        inserirRN(carrinho, prod->item);
                        printf("Adicionado ao carrinho!\n");
                    } else {
                        printf("Produto nao encontrado!\n");
                    }
                }
                break;
            case 3:
                printf("\n--- Carrinho (Rubro-Negro) ---\n");
                emOrdemRN(*carrinho);
                break;
            case 0:
                break;
            default:
                printf("Opcao invalida!\n");
        }
    } while (opc != 0);
}

int main() {
    NoAVL* arvoreCodigo = NULL;
    NoRN* carrinho = NULL;

    carregarCSV("produtos_simples_10000.csv", &arvoreCodigo);
    menu(arvoreCodigo, &carrinho);

    return 0;
}
